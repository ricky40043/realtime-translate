## 階段一：基礎功能完善
1. 我要對外，現在是localhost，我要改區網
   - [x] 修改前端 API 地址為區網 IP
   - [x] 修改 CORS 設定支援區網訪問
   - [x] 修改 docker-compose 網路設定
   - [x] 測試區網連線

2. 房間連線測試要幫我開兩個網頁互相測試看看，彼此聊天是否對方會看到聊天資訊
   - [x] 開啟兩個瀏覽器視窗測試
   - [x] 驗證即時訊息同步
   - [ ] 測試語音翻譯功能
   - [ ] 確認多人字幕顯示

## 階段二：架構重構
1. 未來會有一個主版是負責開房間，他會有每個人聊天的主板訊息，他與現在畫面一樣有設定跟分享房間，但不需要有等待字幕的畫面，而是主板訊息滿版
   - [x] 建立主板頁面 (HostBoard.vue)
   - [x] 移除個人字幕區域，主板訊息滿版
   - [x] 保留設定和分享房間功能
   - [x] 修改路由 /host/:roomId

2. 主版不在需要有預設語言，而是每一個用戶會有兩個語言去設定，輸入跟輸出
   - [x] 修改用戶資料結構：input_lang, output_lang
   - [x] 修改房間語言邏輯：移除預設語言
   - [x] 更新 API：支援用戶雙語言設定
   - [x] 修改翻譯邏輯：根據 output_lang 顯示

3. 每一個聊天的人則是看到即時的翻譯結果，只會有一個最新的訊息，不是自己的，而是其他人的，所以前端會分成兩個不同的介面一個是主板，一個是用戶
   - [x] 建立用戶頁面 (UserView.vue)
   - [x] 只顯示最新的他人訊息
   - [x] 實作個人即時字幕邏輯
   - [x] 路由設定 /user/:roomId

4. 用戶的界面會有輸入框或是語音按鈕，輸入框會有兩個語言去設定，輸入跟輸出
   - [x] 建立用戶輸入介面
   - [x] 雙語言設定：輸入語言、輸出語言
   - [x] 整合語音和文字輸入
   - [x] 個人設定持久化

## 實作完成記錄
✅ **階段一：基礎功能完善** - 已完成
- ✅ 修改前端 API 地址支援區網訪問
- ✅ 更新 WebSocket 連線支援區網
- ✅ 修改 docker-compose 網路設定
- ✅ 建立房間連線測試工具

✅ **階段二：架構重構** - 已完成
- ✅ 建立主板頁面 (HostBoard.vue) - 滿版訊息顯示
- ✅ 建立用戶頁面 (UserView.vue) - 大字幕個人視圖
- ✅ 實作雙語言系統 (input_lang + output_lang)
- ✅ 更新後端 API 和資料庫結構
- ✅ 新增路由 /host/:roomId 和 /user/:roomId
- ✅ 個人設定持久化功能

🔧 **測試工具已建立：**
- 房間連線測試: tmp_rovodev_test_rooms.html
- 新架構測試: tmp_rovodev_test_architecture.html

🌐 **可用的訪問地址：**
- Vue 前端: http://localhost:5174/
- 主板頁面: http://localhost:5174/host/{roomId}
- 用戶頁面: http://localhost:5174/user/{roomId}
- 後端 API: http://localhost:8081/api/
- 測試工具: http://localhost:8000/tmp_rovodev_test_*.html